<?php return [
    'module' => [
        'secure_system' => 'Secure System',
        'name' => 'Database Authorization',
        'description' => 'You are seeing this other user\'s tab because you are a <strong>Super User</strong>.<br/>DB Auth forces login in to the database with the users login credentials, instead of hard-coded credentials in the <strong>.env</strong> file. The <strong>.env</strong> file should have &lt;DBAUTH&gt; for the <strong>DB_USERNAME</strong> / <strong>DB_PASSWORD</strong> settings. Every user that wants to login to the database must therefore have a Database user with the correct privileges, not just an entry in the backend_users table.',
    ],
    'hints' => [
        'no_db_user' => 'Warning! This Winter backend user has no equivalent DB user.',
        'save_2_create' => 'Save this user to auto-create the DB user now.',
        'current_user' => 'Current user identity in the database',
        'made_from_token' => 'made from token_%id',
        'user_identity' => 'User identity in the database',
        'env_error' => 'Warning! Your .env may contain the Development username and password for the database. Please replace them with &quot;&lt;DBAUTH&gt;&quot; to enable this plugin.',
        'edit_env' => 'Edit your .env file directly to enable security.',
        'real_user' => 'Warning! Your .env contains a real username and password for the database. Please replace them with &quot;&lt;DBAUTH&gt;&quot; to enable this plugin.',
    ],
    'errors' => [
        'auth_failed' => 'Password authentication failed.',
        'create_role_required' => 'Create roles privilege is required.',
    ],
    'permissions' => [
        'setup_user' => 'Setup user',
        'manage_settings' => 'Manage DBAuth settings',
    ],
    'models' => [
        'user' => [
            'sync_user' => 'Create and synchronise DB user',
            'sync_user_comment' => 'This includes password changes.',
            'dbauth_password' => 'Password',
            'dbauth_password_comment' => 'Required for <i>update</i> because DBAuth cannot know the original password.',
            'rolecreate' => 'Allow user to create session sub-role: token_%id',
            'rolecreate_comment' => 'This sub-role is used for general Database sessions after initial login with the main role.',
            'withgrantoption' => 'Grant the privileges selected below to token_%id',
            'withgrantoption_comment' => 'This would not be necessary if the public schema allows general access.',
            'db_super_user' => 'Make DB super-user',
            'db_super_user_comment' => 'This will only be available if the user is marked as a <b>Super User</b> in Winter above.',
            'grants' => 'Grants',
            'grants_comment' => 'Explicit grants for this <b>token_%</b> on Database objects. This is not necessary in general databases where PUBLIC has appropriate access.',
            'grant_database_usage' => 'Database usage privilege',
            'grant_database_usage_comment' => 'Necessary for system usage.',
            'schema_usage' => 'Schema usage privilege',
            'schema_usage_comment' => 'Necessary for system usage.',
            'grant_tables_all' => 'All Tables privileges',
            'grant_sequences_all' => 'All Sequences privileges',
            'grant_sequences_all_comment' => 'Sequences are used in the winter base system',
            'grant_functions_all' => 'All Functions privileges',
        ],
        'settings' => [
            'auto_create_backend_user' => 'Auto-Create the backend_users record',
            'auto_create_backend_user_comment' => 'If a login is successful with a PostGreSQL DB user, then the backend_users record will be checked and automatically created if missing allowing the full login to be successful.',
            'auto_create_db_user' => 'Auto-Create the database role',
            'auto_create_db_user_comment' => 'When the backend user is created and saved, a database role will automatically be created.',
            'encrypt_sessions' => 'Encrypt sessions',
            'encrypt_sessions_comment' => 'Session keys and transport are SSL encrypted but Session data files, including the temporary database login id and password, are stored in plain text in the session file by default. Turn this on to encrypt session files.',
            'sessions_location' => 'Location of session files',
            'sessions_location_comment' => 'Change the default location of the session files to better hide them',
        ],
    ],
];
?>